// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ashmeet13/YoutubeDataService/source/youtube (interfaces: YoutubeInterface)

// Package mock_youtube is a generated GoMock package.
package mock_youtube

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	youtube "google.golang.org/api/youtube/v3"
)

// MockYoutubeInterface is a mock of YoutubeInterface interface.
type MockYoutubeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockYoutubeInterfaceMockRecorder
}

// MockYoutubeInterfaceMockRecorder is the mock recorder for MockYoutubeInterface.
type MockYoutubeInterfaceMockRecorder struct {
	mock *MockYoutubeInterface
}

// NewMockYoutubeInterface creates a new mock instance.
func NewMockYoutubeInterface(ctrl *gomock.Controller) *MockYoutubeInterface {
	mock := &MockYoutubeInterface{ctrl: ctrl}
	mock.recorder = &MockYoutubeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYoutubeInterface) EXPECT() *MockYoutubeInterfaceMockRecorder {
	return m.recorder
}

// DoSearchList mocks base method.
func (m *MockYoutubeInterface) DoSearchList(arg0 string, arg1 []string, arg2, arg3, arg4 string, arg5 int) (*youtube.SearchListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSearchList", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*youtube.SearchListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSearchList indicates an expected call of DoSearchList.
func (mr *MockYoutubeInterfaceMockRecorder) DoSearchList(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSearchList", reflect.TypeOf((*MockYoutubeInterface)(nil).DoSearchList), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DoSearchListNextPage mocks base method.
func (m *MockYoutubeInterface) DoSearchListNextPage(arg0 string, arg1 []string, arg2, arg3, arg4, arg5 string, arg6 int) (*youtube.SearchListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSearchListNextPage", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*youtube.SearchListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSearchListNextPage indicates an expected call of DoSearchListNextPage.
func (mr *MockYoutubeInterfaceMockRecorder) DoSearchListNextPage(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSearchListNextPage", reflect.TypeOf((*MockYoutubeInterface)(nil).DoSearchListNextPage), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpdateAPIKey mocks base method.
func (m *MockYoutubeInterface) UpdateAPIKey(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockYoutubeInterfaceMockRecorder) UpdateAPIKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockYoutubeInterface)(nil).UpdateAPIKey), arg0)
}
